.read-later-header {
    margin-bottom: 3rem;
    margin-top: 3rem;
    text-align: left;
    text-transform: none;
    font-weight: bold;
    letter-spacing: -.04em;
    font-size: 26px;
    line-height: 40px;
    margin-top: 1.5rem;
    box-sizing: border-box;
    color: #333333;
    font-family: sans-serif;
}

.empty-read-later-header {
    color: #333333;
    font-family: sans-serif;
    font-size: 1.25rem;
    font-weight: bold;
    letter-spacing: -.04em;
    line-height: 1.25em;
    margin-bottom: 1.5rem;
    margin-top: 3rem;
    text-transform: none;
}

.empty-read-later-msg {
    color: #757575;
    font-size: 0.875rem;
    line-height: 1.5;
    margin-bottom: 1.5rem;
    margin-top: 1.5rem;
}

.empty-read-later-container {
    margin-top: 6rem;
    max-width: 408px;
    padding: 0 1rem;
    margin-left: auto;
    margin-right: auto;
    text-align: center;
    box-sizing: border-box;
}

.read-later-latest-header {
    margin: 0px;
    font-size: 12px;
    font-family: sans-serif;
    display: block;
    margin-block-start: 1.33em;
    margin-block-end: 1.33em;
    margin-inline-start: 0px;
    margin-inline-end: 0px;
    box-sizing: border-box;
    -webkit-font-smoothing: antialiased;
    clear: both;
    color: #757575;
    font-size: 0.75rem;
    font-weight: bold;
    letter-spacing: 0;
    line-height: 1em;
    text-transform: uppercase;
    margin-bottom: 1rem;
    margin-top: 2rem;
}

.read-later-li {
    align-items: center;
    border-bottom: 1px solid transparent;
    border-left: 1px solid transparent;
    border-right: 1px solid transparent;
    border-top: 1px solid #efefef;
    display: flex;
    display: -webkit-flex;
    height: 31px;
    margin-bottom: -1px;
    border: 1px solid transparent;
    cursor: pointer;
    text-rendering: optimizeLegibility;
    box-sizing: border-box;
    font-size: 12px;
    font-family: sans-serif;
}

.read-later-a-tag {
    -webkit-font-smoothing: auto;
    font-weight: normal;
    display: inline;
    font-size: 13px;
    line-height: normal;
    padding-right: 0.5rem;
    color: inherit;
    text-decoration: none;
    cursor: pointer;
    outline: 0;
    box-sizing: border-box;
    white-space: nowrap;
    text-rendering: optimizeLegibility;
}

.read-later-a-tag:visited {
    color: grey;
}

.read-later-ul {
    border-top: 1px grey;
}

import React from 'react';
import { connect } from 'react-redux';
import { deleteReadLater } from '../../actions/read_later_actions'
import { fetchUser } from '../../actions/session_actions';
import './readLater.css'
class ReadLater extends React.Component {
    constructor(props) {
        super(props);
        this.state = { read: false };
        this.addReadClass = this.addReadClass.bind(this);
        this.disableWarning = null;
    }
    addReadClass() {
        this.setState({ read: !this.state.read });
    }

    componentDidMount() {
        this.props.fetchUser(this.props.currentUser);
    }

    // componentDidUpdate(prevProps){
    //     if (this.props.readArray){
    //         if (this.props.readArray.length !== prevProps.readArray.length) {
    //             this.props.fetchUser(this.props.currentUser);
    //         }
    //     }
    // }

    renderReadLater() {
        let please;
        if (this.props.readArray){
          
            please = this.props.readArray.map(source =>   
                <li key={source._id} 
                    className="read-later-li">
                    <a 
                        // onClick={this.addReadClass}
                        target="_blank"
                        className={this.state.read ? "read-later-a-tag has-been-read" : "read-later-a-tag"}
                        href={source.readLaterURL}>
                        {source.readLaterURL.slice(0, 20)} {source.readLaterDescription.slice(0, 150)}
                    </a>
                    <button onClick={() => this.props.deleteReadLater({
                        reader: this.props.currentUserId,
                        readLaterId: source._id
                    })}
                    className="w3-button w3-black">X</button>
                </li>
            )
        }
        
            return (
                    <ul className="read-later-ul">
                        {please}
                    </ul>
            )

    }

    render() {

        if (!this.props.readArray) {
            return null
        }

        const display = (this.props.readArray.length > 0) ? (
            <div className="read-later-list-container">
                <h4 className="read-later-latest-header">LATEST</h4>
                {this.renderReadLater()}
                <h4 className="read-later-latest-header">END OF FEED</h4>

            </div>
        ):(
            <div className="empty-read-later-container">
                <h2 className="empty-read-later-header">No Read Later Stories Yet</h2>
                <div className="empty-read-later-msg">The articles you want to read later will be here</div>
            </div>
        )
        return (
            <div className="read-later-container">
                <header className="read-later-header">Read later</header>
                {display}
            </div>
        )
    }
}


const mstp = state => {

    return {
        isAuthenticated: state.session.isAuthenticated,
        currentUserId: state.session.user.id,
        currentUser: state.session.user,
        readArray: state.session.user.readArray
    }
}

const mdtp = dispatch => ({
    fetchUser: user => dispatch(fetchUser(user)),
    deleteReadLater: readLater => dispatch(deleteReadLater(readLater))
})

export default connect(mstp, mdtp)(ReadLater);
